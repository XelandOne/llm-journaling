openapi: 3.0.0
info:
  title: LifeChat API
  description: API for logging and analyzing life events and feelings
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Local development server

components:
  schemas:
    Event:
      type: object
      required:
        - date
        - startTime
        - endTime
        - description
        - tags
        - name
      properties:
        date:
          type: string
          format: date
          example: "2025-06-15"
        startTime:
          type: string
          format: date-time
          example: "2025-06-15T09:00:00"
        endTime:
          type: string
          format: date-time
          example: "2025-06-15T11:00:00"
        description:
          type: string
          example: "Team meeting to discuss project updates"
        tags:
          type: array
          items:
            type: string
          example: ["work", "meeting"]
        name:
          type: string
          example: "Team Meeting"

    Feeling:
      type: object
      required:
        - feelings
        - score
        - datetime
      properties:
        feelings:
          type: array
          items:
            type: string
          example: ["happy", "motivated"]
        score:
          type: integer
          minimum: 1
          maximum: 10
          example: 8
        datetime:
          type: string
          format: date-time
          example: "2025-06-15T10:00:00"

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          example: "I've added your meeting to the calendar and noted your positive mood."
        created_events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        feeling:
          type: array
          items:
            $ref: '#/components/schemas/Feeling'

paths:
  /lifeChat:
    post:
      summary: Submit a chat message and get AI response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chat
              properties:
                chat:
                  type: string
                  example: "I have a team meeting tomorrow at 10 AM"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /getEvents:
    get:
      summary: Get events within a time range
      parameters:
        - name: startTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T00:00:00"
        - name: endTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T23:59:59"
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /getFeelings:
    get:
      summary: Get feelings within a time range
      parameters:
        - name: startTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T00:00:00"
        - name: endTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T23:59:59"
      responses:
        '200':
          description: List of feelings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feeling'

  /getAdvice:
    get:
      summary: Get AI-generated advice based on events and feelings
      parameters:
        - name: startTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T00:00:00"
        - name: endTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T23:59:59"
      responses:
        '200':
          description: AI-generated advice
          content:
            text/plain:
              schema:
                type: string
                example: "Based on your recent activities and mood, I suggest..."

  /getMotivationalSpeech:
    get:
      summary: Get AI-generated motivational speech as audio
      parameters:
        - name: startTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T00:00:00"
        - name: endTime
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2025-06-15T23:59:59"
      responses:
        '200':
          description: Audio file of motivational speech
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary